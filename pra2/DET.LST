Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 1
det.asm



      1				     ;**************************************************************************
      2				     ; PROGRAMA	PARA CALCULAR EL DETERMINANTE DE UNA MATRIZ
      3				     ; PRÁCTICA 2
      4				     ; DANIEL SANTO-TOMÁS LÓPEZ
      5				     ; LUCIA RIVAS MOLINA
      6				     ;**************************************************************************
      7
      8				     ; DEFINICION DEL SEGMENTO DE DATOS
      9
     10	0000			     DATOS SEGMENT
     11
     12	0000  F0 02 03 01 F0 03	01+	     A	     DB	     -16, 2, 3,	1, -16,	3, 1, -16, 1
     13	      F0 01
     14	0009  53 65 6C 65 63 63	69+	     TEXTO DB "Seleccione una opcion:",	13, 10,	"1) Calcular el	determinante con valores por+
     15	      6F 6E 65 20 75 6E	61+  defecto",13,10, "2) Calcular el determinante con valores introducidos por teclado", 13, 10, '$'
     16	      20 6F 70 63 69 6F	6E+
     17	      3A 0D 0A 31 29 20	43+
     18	      61 6C 63 75 6C 61	72+
     19	      20 65 6C 20 64 65	74+
     20	      65 72 6D 69 6E 61	6E+
     21	      74 65 20 63 6F 6E	20+
     22	      76 61 6C 6F 72 65	73+
     23	      20 70 6F 72 20 64	65+
     24	      66 65 63 74 6F 0D	0A+
     25	      32 29 20 43 61 6C	63+
     26	      75 6C 61 72 20 65	6C+
     27	      20 64 65 74 65 72	6D+
     28	      69 6E 61 6E 74 65	20+
     29	      63 6F 6E 20 76 61	6C+
     30	      6F 72 65 73 20 69	6E+
     31	      74 72 6F 64 75 63	69+
     32	      64 6F 73 20 70 6F	72+
     33	      20 74 65 63 6C 61	64+
     34	      6F 0D 0A 24
     35	0099  03*(??)			     OPCION DB 3 DUP(?)		     ; Guarda la opcion	escrita	por teclado en OPCION[2]
     36	009C  14*(00)			     NUMERO DB 20 DUP(0)	     ; Guarda los dígitos de un número
     37	00B0  0000			     NUM_DIGITOS DW 0H		     ;
     38	00B2  20 20 20 20 20 7C	20+	     ESPACIOS DB "     |	   |", 13, 10,"|A|= |		|=     ", 13, 10,"     |    +
     39	      20 20 20 20 20 20	20+  |", 13, 10, '$'
     40	      20 20 20 7C 0D 0A	7C+
     41	      41 7C 3D 20 7C 20	20+
     42	      20 20 20 20 20 20	20+
     43	      20 20 7C 3D 20 20	20+
     44	      20 20 0D 0A 20 20	20+
     45	      20 20 7C 20 20 20	20+
     46	      20 20 20 20 20 20	20+
     47	      7C 0D 0A 24
     48	00F5  0000			     CONTADOR DW 0H
     49	00F7  0D 0A 49 6E 74 72	6F+	     OPCION2 DB	13, 10,	"Introduzca los	9 elementos de la matriz uno por uno, maximo 15	y   +
     50	      64 75 7A 63 61 20	6C+  minimo -16, separandolos con un salto de linea, y empezando de izquierda a	derecha	y de arriba +
     51	      6F 73 20 39 20 65	6C+  a abajo :", 13, 10, '$'
     52	      65 6D 65 6E 74 6F	73+
     53	      20 64 65 20 6C 61	20+
     54	      6D 61 74 72 69 7A	20+
     55	      75 6E 6F 20 70 6F	72+
     56	      20 75 6E 6F 2C 20	6D+
     57	      61 78 69 6D 6F 20	31+
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 2
det.asm



     58	      35 20 79 20 6D 69	6E+
     59	      69 6D 6F 20 2D 31	36+
     60	      2C 20 73 65 70 61	72+
     61	      61 6E 64 6F 6C 6F	73+
     62	      20 63 6F 6E 20 75	6E+
     63	      20 73 61 6C 74 6F	20+
     64	      64 65 20 6C 69 6E	65+
     65	      61 2C 20 79 20 65	6D+
     66	      70 65 7A 61 6E 64	6F+
     67	      20 64 65 20 69 7A	71+
     68	      75 69 65 72 64 61	20+
     69	      61 20 64 65 72 65	63+
     70	      68 61 20 79 20 64	65+
     71	      20 61 72 72 69 62	61+
     72	      20 61 20 61 62 61	6A+
     73	      6F 20 3A 0D 0A 24
     74	01A5  0D 0A 65 72 72 6F	72+	     ERRORM DB 13, 10, "error",	13, 10,'$'
     75	      0D 0A 24
     76	01AF  0D 0A 24			     BARRAENE DB 13, 10, '$'
     77
     78	01B2			     DATOS ENDS
     79
     80
     81				     ; DEFINICION DEL SEGMENTO DE PILA
     82
     83	0000			     PILA    SEGMENT STACK "STACK"
     84	0000  40*(00)			 DB   40H DUP (0)
     85	0040			     PILA ENDS
     86
     87
     88				     ; DEFINICION DEL SEGMENTO EXTRA
     89
     90	0000			     EXTRA     SEGMENT
     91	0000  0000 0000			 RESULT	   DW 0,0		  ; 2 PALABRAS ( 4 BYTES )
     92	0004			     EXTRA ENDS
     93
     94
     95				     ; DEFINICION DEL SEGMENTO DE CODIGO
     96
     97	0000			     CODE    SEGMENT
     98					 ASSUME	CS:CODE, DS:DATOS, ES: EXTRA, SS:PILA
     99
    100	0000  0000		     FACT_DATO_1  DW	   0
    101
    102				     ; COMIENZO	DEL PROCEDIMIENTO PRINCIPAL
    103
    104	0002			     START PROC	NEAR
    105					 ;INICIALIZA LOS REGISTROS DE SEGMENTO CON SUS VALORES
    106	0002  B8 0000s			 MOV AX, DATOS
    107	0005  8E D8			 MOV DS, AX
    108
    109	0007  B8 0000s			 MOV AX, PILA
    110	000A  8E D0			 MOV SS, AX
    111
    112	000C  B8 0000s			 MOV AX, EXTRA
    113	000F  8E C0			 MOV ES, AX
    114
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 3
det.asm



    115					 ; CARGA EL PUNTERO DE PILA CON	EL VALOR MAS ALTO
    116	0011  BC 0040			 MOV SP, 64
    117
    118					 ; FIN DE LAS INICIALIZACIONES
    119
    120	0014			     ARRIBA:
    121
    122	0014  BA 0009r			     MOV DX, OFFSET TEXTO	     ; DX = offset al inicio del texto a imprimir
    123	0017  B4 09			     MOV AH, 9					     ; Número de función = 9 para imprimir+
    124				     un	string
    125	0019  CD 21			     INT 21h					     ; Imprime por pantalla que	opcion debe +
    126				     escoger
    127
    128	001B  BA 0099r			     MOV DX, OFFSET OPCION	     ; Reservamos OPCION para la opcion	introducida por	    +
    129				     teclado
    130	001E  B4 0A			     MOV AH, 0AH			     ; Capturamos por teclado la opcion	a ejecutar(1+
    131				     o 2)
    132	0020  C6 06 0099r 03		     MOV OPCION[0], 3			     ; Lectura de caracteres máxima=60
    133	0025  CD 21			     INT 21H
    134
    135	0027  80 3E 009Br 31		     CMP BYTE PTR OPCION[2], 31H     ; Vemos que opcion	hemos elegido
    136	002C  74 0A			     JE	OP1					     ; Si es 1 saltamos	a OP1 y	calculamos  +
    137				     el	determinante por defecto
    138	002E  80 3E 009Br 32		     CMP BYTE PTR OPCION[2], 32H
    139	0033  75 DF			     JNE ARRIBA
    140	0035  E8 0102			     CALL OP2
    141
    142
    143
    144
    145	0038			     OP1:
    146
    147	0038  E8 01F7			     CALL POS			 ; Llamamos a la función que calcula la parte positiva	del +
    148				     determinante
    149	003B  8B E9			     MOV BP, CX					     ; Copiamos	el resultado de	POS a DX
    150	003D  E8 023B			     CALL NEGAT					     ; Llamamos	a la función que calcula la+
    151				     parte negativa del	determinante
    152	0040  2B E9			     SUB BP, CX					     ; Restamos	al resultado positivo el    +
    153				     resultado negativo
    154	0042  8B CD			     MOV CX, BP					     ; Almacenamos el resultado	en CX
    155
    156
    157	0044			     BUCLE:
    158
    159	0044  8B 2E 00F5r		     MOV BP, CONTADOR
    160	0048  3E: 8A 86	0000r		     MOV AL, A[BP]			     ; Guardamos en AL el valor	del número a	    +
    161				     transformar en ascii
    162
    163	004D  C6 06 009Cr 20		     MOV NUMERO[0], " "			     ; Metemos un espacio en numero[0]
    164	0052  04 00			     ADD AL, 0H					     ; Sumamos 0 al número para ver si	es  +
    165				     negativo o	no
    166	0054  79 07			     JNS MAS					     ; Si es positivo salta a mas
    167
    168	0056  C6 06 009Cr 2D		     MOV NUMERO[0], 2DH			     ; Es negativo, ponemos un menos en	ascii
    169	005B  F6 D8			     NEG AL
    170
    171	005D			     MAS:
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 4
det.asm



    172
    173	005D  B4 00			     MOV AH, 0H						     ; Cargamos	00 en Ah para tener +
    174				     todo el numero en AX(numero positivo)
    175	005F  E8 019B			     CALL NUM						     ; LLamamos	a NUM, que guarda en+
    176				     NUMERO los	digitos	en ascii
    177
    178	0062  83 3E 00F5r 00		     CMP CONTADOR, 0H				     ; Hacemos una serie de comparaciones   +
    179				     con sus respectivos saltos. Dependiendo de
    180	0067  74 5E			     JE	CERO						     ; por donde vaya el contador,  +
    181				     iremos por	un número u otro, asi que saltamos al
    182													     ; correspondiente
    183	0069  83 3E 00F5r 01		     CMP CONTADOR, 1H
    184	006E  74 5C			     JE	UNO
    185
    186	0070  83 3E 00F5r 02		     CMP CONTADOR, 2H
    187	0075  74 5A			     JE	DOS
    188
    189	0077  83 3E 00F5r 03		     CMP CONTADOR, 3H
    190	007C  74 58			     JE	TRES
    191
    192	007E  83 3E 00F5r 04		     CMP CONTADOR, 4H
    193	0083  74 56			     JE	CUATRO
    194
    195	0085  83 3E 00F5r 05		     CMP CONTADOR, 5H
    196	008A  74 54			     JE	CINCO
    197
    198	008C  83 3E 00F5r 06		     CMP CONTADOR, 6H
    199	0091  74 52			     JE	SEIS
    200
    201	0093  83 3E 00F5r 07		     CMP CONTADOR, 7H
    202	0098  74 50			     JE	SIETE
    203
    204	009A  83 3E 00F5r 08		     CMP CONTADOR, 8H
    205	009F  74 4E			     JE	OCHO
    206
    207	00A1			     SIGUE:
    208
    209	00A1  A0 009Cr			     MOV AL, NUMERO[0]				     ; Colocamos el signo en la	primera	    +
    210				     posición correspondiente al número en la	matriz
    211	00A4  88 84 00B2r		     MOV ESPACIOS[SI], AL
    212	00A8  46			     INC SI						     ; Incrementamos SI
    213
    214	00A9  A0 009Er			     MOV AL, NUMERO[2]				     ; Colocamos el primer dígito
    215	00AC  88 84 00B2r		     MOV ESPACIOS[SI], AL
    216	00B0  46			     INC SI						     ; Incrementamos SI
    217
    218	00B1  A0 009Dr			     MOV AL, NUMERO[1]				     ; Colocamos el segundo dígito
    219	00B4  88 84 00B2r		     MOV ESPACIOS[SI], AL
    220	00B8  46			     INC SI						     ; Incrementamos SI
    221
    222	00B9  FF 06 00F5r		     INC CONTADOR				     ; Incrementamos CONTADOR
    223	00BD  83 3E 00F5r 09		     CMP CONTADOR, 9H				     ; Si CONTADOR vale	9, hemos terminado, +
    224				     si	no, salta a SIGUE
    225	00C2  75 80			     JNE BUCLE
    226	00C4  EB 2E 90			     JMP FIN						     ; Sino, salta a FIN
    227
    228	00C7			     CERO:							     ; Una vez en el		    +
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 5
det.asm



    229				     correspondiente, almacenamos en SI	la posición en	la que se debe colocar
    230	00C7  BE 0006			     MOV SI, 6H						     ; el numero en la tabla ESPACIOS
    231	00CA  EB D5			     JMP SIGUE
    232	00CC			     UNO:
    233	00CC  BE 000A			     MOV SI, 0AH
    234	00CF  EB D0			     JMP SIGUE
    235	00D1			     DOS:
    236	00D1  BE 000E			     MOV SI, 0EH
    237	00D4  EB CB			     JMP SIGUE
    238	00D6			     TRES:
    239	00D6  BE 001A			     MOV SI, 1AH
    240	00D9  EB C6			     JMP SIGUE
    241	00DB			     CUATRO:
    242	00DB  BE 001E			     MOV SI, 1EH
    243	00DE  EB C1			     JMP SIGUE
    244	00E0			     CINCO:
    245	00E0  BE 0022			     MOV SI, 22H
    246	00E3  EB BC			     JMP SIGUE
    247	00E5			     SEIS:
    248	00E5  BE 0034			     MOV SI, 34H
    249	00E8  EB B7			     JMP SIGUE
    250	00EA			     SIETE:
    251	00EA  BE 0038			     MOV SI, 38H
    252	00ED  EB B2			     JMP SIGUE
    253	00EF			     OCHO:
    254	00EF  BE 003C			     MOV SI, 3CH
    255	00F2  EB AD			     JMP SIGUE
    256
    257
    258					     ; FINALMENTE IMPRIMIMOS EL	RESULTADO
    259	00F4			     FIN:
    260
    261	00F4  8B C1			     MOV AX, CX						     ; Guardamos en AX el valor	del +
    262				     número a transformar en ascii
    263
    264	00F6  C6 06 009Cr 20		     MOV NUMERO[0], " "				     ; Metemos un espacio en numero[0]
    265	00FB  05 0000			     ADD AX, 0H						     ; Sumamos 0 al número para ver+
    266				     si	es negativo o no
    267	00FE  79 07			     JNS MAS2						     ; Si es positivo salta a mas2
    268
    269	0100  C6 06 009Cr 2D		     MOV NUMERO[0], 2DH				     ; Es negativo, ponemos un menos en	ascii
    270	0105  F7 D8			     NEG AX
    271
    272	0107			     MAS2:
    273
    274	0107  E8 00F3			     CALL NUM						     ; Llamamos	a la función NUM   +
    275				     para convertirlo a	ASCII
    276
    277
    278	010A  BE 0027			     MOV SI, 27H					     ; El resultado comienza en	la  +
    279				     posición 27h = 39
    280	010D  A0 009Cr			     MOV AL, NUMERO[0]				     ; Colocamos el signo en la	primera	    +
    281				     posición correspondiente al número en la	matriz
    282	0110  88 84 00B2r		     MOV ESPACIOS[SI], AL
    283
    284	0114  03 36 00B0r		     ADD SI, NUM_DIGITOS			     ; Vamos a imprimir	de atrás a delante +
    285				     , asi que inicializamos SI	a la posición del
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 6
det.asm



    286	0118  BD 0000			     MOV BP, 0						     ; último dígito,	y BP a 1
    287
    288
    289	011B			     BUCLE2:
    290
    291	011B  45			     INC BP
    292	011C  3E: 8A 86	009Cr		     MOV AL, NUMERO[BP]				     ; Movemos a AL el dígito		    +
    293				     correspondiente
    294	0121  88 84 00B2r		     MOV ESPACIOS[SI], AL		     ; Y ponemos el dígito en su posición
    295	0125  83 EE 01			     SUB SI, 1H						     ; Decrementamos SI	y BP
    296	0128  3B 2E 00B0r		     CMP BP, NUM_DIGITOS			     ; Si BP es	distinto de NUM_DIGITOS,    +
    297				     salta al bucle2
    298	012C  75 ED			     JNE BUCLE2
    299
    300
    301
    302
    303
    304	012E  BA 00B2r			     MOV DX, OFFSET ESPACIOS		     ; Imprime la matriz
    305	0131  B4 09			     MOV AH, 9
    306	0133  CD 21			     INT 21H
    307
    308
    309
    310					 ; FIN DEL PROGRAMA
    311	0135  B8 4C00			 MOV AX, 4C00H
    312	0138  CD 21			 INT 21H
    313
    314	013A			     START ENDP
    315				     ;______________________________________________________________________
    316				     ; SUBRUTINA PARA LEER POR PANTALLA
    317				     ; ENTRADA
    318				     ; SALIDA
    319				     ;______________________________________________________________________
    320
    321	013A			     OP2 PROC NEAR
    322
    323	013A  BA 00F7r		     MOV DX, OFFSET OPCION2	     ; DX = offset al inicio del texto a imprimir
    324	013D  B4 09			     MOV AH, 9					     ; Número de función = 9 para imprimir+
    325				     un	string
    326	013F  CD 21			     INT 21h					     ; Imprime por pantalla que	opcion debe +
    327				     escoger
    328
    329	0141  BD 0000			     MOV BP, 00H
    330	0144  89 2E 009Er		     MOV WORD PTR NUMERO[2], BP	     ; Copiamos	un 0 en	la variable opcion
    331
    332
    333	0148			     OP2BUCLE:
    334
    335	0148  BA 009Cr			     MOV DX, OFFSET NUMERO	     ; Guardamos en opcion el numero introducido
    336	014B  B4 0A			     MOV AH, 0AH
    337	014D  C6 06 009Cr 0A		     MOV NUMERO[0], 10
    338	0152  CD 21			     INT 21H
    339
    340	0154  80 3E 009Dr 01		     CMP NUMERO[1], 1
    341	0159  74 17			     JE	UNOD
    342
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 7
det.asm



    343	015B  80 3E 009Dr 02		     CMP NUMERO[1], 2
    344	0160  74 21			     JE	DOSD
    345
    346	0162  80 3E 009Dr 03		     CMP NUMERO[1], 3
    347	0167  74 57			     JE	TRESD
    348
    349	0169			     ERRORS:
    350
    351	0169  BA 01A5r			     MOV DX, OFFSET ERRORM
    352	016C  B4 09			     MOV AH, 9
    353	016E  CD 21			     INT 21h
    354
    355	0170  EB C8			     JMP OP2
    356
    357	0172			     UNOD:
    358
    359	0172  80 2E 009Er 30		     SUB NUMERO[2], 30H
    360	0177  8A 1E 009Er		     MOV BL, NUMERO[2]
    361	017B  3E: 88 9E	0000r		     MOV A[BP],	BL
    362	0180  EB 6A 90			     JMP CONTINUA
    363
    364
    365	0183			     DOSD:
    366
    367	0183  80 3E 009Er 2D		     CMP NUMERO[2], 2DH
    368	0188  75 13			     JNE DOSNUM
    369
    370	018A  80 2E 009Fr 30		     SUB NUMERO[3], 30H
    371	018F  8A 1E 009Fr		     MOV BL, NUMERO[3]
    372	0193  F6 DB			     NEG BL
    373	0195  3E: 88 9E	0000r		     MOV A[BP],	BL
    374	019A  EB 50 90			     JMP CONTINUA
    375
    376
    377	019D			     DOSNUM:
    378
    379	019D  80 2E 009Fr 30		     SUB NUMERO[3], 30H
    380	01A2  8A 1E 009Fr		     MOV BL, NUMERO[3]
    381	01A6  B0 0A			     MOV AL, 0AH
    382	01A8  80 2E 009Er 30		     SUB NUMERO[2], 30H
    383	01AD  F6 26 009Er		     MUL NUMERO[2]
    384	01B1  02 D8			     ADD BL, AL
    385	01B3  3E: 88 9E	0000r		     MOV A[BP],	BL
    386
    387	01B8  80 FB 0F			     CMP BL, 0FH
    388	01BB  7F AC			     JG	ERRORS
    389
    390	01BD  EB 2D 90			     JMP CONTINUA
    391
    392
    393	01C0			     TRESD:
    394
    395	01C0  80 3E 009Er 2D		     CMP NUMERO[2], 2DH
    396	01C5  75 A2			     JNE ERRORS
    397
    398	01C7  80 2E 00A0r 30		     SUB NUMERO[4], 30H
    399	01CC  8A 1E 00A0r		     MOV BL, NUMERO[4]
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 8
det.asm



    400	01D0  B0 0A			     MOV AL, 0AH
    401	01D2  80 2E 009Fr 30		     SUB NUMERO[3], 30H
    402	01D7  F6 26 009Fr		     MUL NUMERO[3]
    403	01DB  02 D8			     ADD BL, AL
    404	01DD  80 FB 10			     CMP BL, 10H
    405	01E0  7F 87			     JG	ERRORS
    406	01E2  F6 DB			     NEG BL
    407	01E4  3E: 88 9E	0000r		     MOV A[BP],	BL
    408
    409
    410
    411	01E9  EB 01 90			     JMP CONTINUA
    412
    413
    414
    415
    416
    417
    418	01EC			     CONTINUA:
    419
    420	01EC  BA 01AFr			     MOV DX, OFFSET BARRAENE
    421	01EF  B4 09			     MOV AH, 9
    422	01F1  CD 21			     INT 21h
    423
    424	01F3  45			     INC BP			     ; Incrementamos el	contador
    425	01F4  83 FD 09			     CMP BP, 09H				     ; Si el contador es menor que 9 vuelve +
    426				     a OP2BUCLE	para capturar el siguiente
    427	01F7  74 03			     JE	FINAL			     ; elemento	de la matriz, sino continua con	el	    +
    428				     determinante
    429	01F9  E9 FF4C			     JMP OP2BUCLE
    430
    431	01FC			     FINAL:
    432
    433	01FC  C3			     RET
    434
    435	01FD			     OP2 ENDP
    436				     ;______________________________________________________________________
    437				     ; SUBRUTINA PARA CALCULAR LOS DÍGITOS DE UN NÚMERO EN ASCII
    438				     ; ENTRADA AX
    439				     ; SALIDA NUMERO[0]	= SIGNO	, NUMERO[1] = PRIMER DIGITO,
    440				     ;		      NUMERO[2]	= SEGUNDO DIGITO
    441				     ;______________________________________________________________________
    442	01FD			     NUM PROC NEAR
    443
    444	01FD  BE 000A			     MOV SI, 0AH				     ; Copiamos	un 10 en SI para dividir por+
    445				     el
    446	0200  BD 0000			     MOV BP, 0H
    447	0203  89 2E 00B0r		     MOV NUM_DIGITOS, BP		     ;Inicializamos NUM_DIGITOS	a 0
    448
    449	0207			     ASCII:
    450
    451	0207  BA 0000			     MOV DX, 00H
    452	020A  FF 06 00B0r		     INC NUM_DIGITOS
    453	020E  F7 F6			     DIV SI					     ; Dividimos el número por	10
    454	0210  80 C2 30			     ADD DL, 30H				     ; Pasamos a ASCII el resto
    455	0213  8B 2E 00B0r		     MOV BP, NUM_DIGITOS
    456	0217  3E: 88 96	009Cr		     MOV NUMERO[BP], DL			     ; Lo copiamos en NUMERO[NUM_DIGITOS]
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 9
det.asm



    457
    458	021C  3D 0000			     CMP AX, 0H					     ; Si el cociente es 0, hemos terminado
    459	021F  75 E6			     JNE ASCII					     ; Si no es	0, volvemos al bucle
    460
    461	0221  83 3E 00B0r 01		     CMP NUM_DIGITOS, 1H		     ; Si no tiene un solo digito acaba
    462	0226  75 09			     JNE DIGITO
    463
    464	0228  BD 0002			     MOV BP, 2H					     ; Sino copia un espacio en	el siguiente
    465	022B  3E: C6 86	009Cr 20	     MOV NUMERO[BP], " "
    466
    467	0231			     DIGITO:
    468
    469	0231  C3			     RET
    470
    471	0232			     NUM ENDP
    472				     ;______________________________________________________________________
    473				     ; SUBRUTINA PARA CALCULAR LA PARTE	POSITIVA DEL DETERMINANTE
    474				     ; ENTRADA
    475				     ; SALIDA CX=RESULTADO
    476				     ;______________________________________________________________________
    477	0232			     POS PROC NEAR
    478
    479	0232  A0 0000r			 MOV AL, A[0h]				     ; Empezamos por la	diagonal, las posiciones 0h,+
    480				     4h	y 8h de	la matriz
    481	0235  F6 2E 0004r		 IMUL A[4h]				     ; Multiplicamos A[0h] por A[4h], y	se almacena +
    482				     el	resultado en AX
    483
    484	0239  8A 1E 0008r		     MOV BL, A[8H]
    485	023D  B7 00			     MOV BH, 0H
    486	023F  80 C3 00			     ADD BL, 0H					     ; Si es positicvo,	saltamos, si es	    +
    487				     negativo, extendemos el signo
    488	0242  79 02			     JNS M00
    489	0244  B7 FF			     MOV BH, 0FFH
    490
    491	0246			     M00:
    492	0246  F7 EB			     IMUL BX					     ; Multiplicamos A[8h],guardado como    +
    493				     WORD en BX, por el	resultado almacenado en	AX.
    494	0248  8B C8			     MOV CX, AX					     ; El resultado queda almacenado en	AX, +
    495				     con DX = 0	ya que los números son	de 5 bits. Lo movemos a	CX
    496
    497	024A  A0 0002r			     MOV AL, A[2h]			     ; Continuamos por los elementos 2h, 3h y 7h
    498	024D  F6 2E 0003r		 IMUL A[3h]				     ; Multiplicamos A[2h] por A[3h], y	se almacena +
    499				     el	resultado en AX
    500
    501	0251  8A 1E 0007r		     MOV BL, A[7H]
    502	0255  B7 00			     MOV BH, 0H
    503	0257  80 C3 00			     ADD BL, 0H					     ; Si es positicvo,	saltamos, si es	    +
    504				     negativo, extendemos el signo
    505	025A  79 02			     JNS M01
    506	025C  B7 FF			     MOV BH, 0FFH
    507
    508	025E			     M01:
    509	025E  F7 EB			     IMUL BX					     ; Multiplicamos A[7h], guardado como   +
    510				     WORD en BX, por el	resultado almacenado en	AX.
    511	0260  03 C8			     ADD CX, AX					     ; Sumamos el resultado a CX, donde	    +
    512				     guardamos el resultado anterior
    513
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 10
det.asm



    514	0262  A0 0001r			     MOV AL, A[1h]			     ; Finalizamos con los elementos 1h, 5h y 6h
    515	0265  F6 2E 0005r		 IMUL A[5h]				     ; Multiplicamos A[1h] por A[5h], y	se almacena +
    516				     el	resultado en AX
    517
    518	0269  8A 1E 0006r		     MOV BL, A[6H]
    519	026D  B7 00			     MOV BH, 0H
    520	026F  80 C3 00			     ADD BL, 0H					     ; Si es positicvo,	saltamos, si es	    +
    521				     negativo, extendemos el signo
    522	0272  79 02			     JNS M02
    523	0274  B7 FF			     MOV BH, 0FFH
    524
    525	0276			     M02:
    526	0276  F7 EB			     IMUL BX					     ; Multiplicamos A[6h], guardado como   +
    527				     WORD en BX, por el	resultado almacenado en	AX.
    528	0278  03 C8			     ADD CX, AX					     ; Finalmente sumamos de nuevo a CX	el  +
    529				     resultado final
    530	027A  C3			     RET
    531
    532
    533	027B			     POS ENDP
    534
    535				     ;______________________________________________________________________
    536				     ; SUBRUTINA PARA CALCULAR LA PARTE	NEGATIVA DEL DETERMINANTE
    537				     ; ENTRADA
    538				     ; SALIDA CX=RESULTADO
    539				     ;______________________________________________________________________
    540	027B			     NEGAT PROC	NEAR
    541
    542	027B  A0 0002r			 MOV AL, A[2h]				     ; Empezamos por la	diagonal, las posiciones 2h,+
    543				     4h	y 6h de	la matriz
    544	027E  F6 2E 0004r		 IMUL A[4h]				     ; Multiplicamos A[2h] por A[4h], y	se almacena +
    545				     el	resultado en AX
    546
    547	0282  8A 1E 0006r		     MOV BL, A[6H]
    548	0286  B7 00			     MOV BH, 0H
    549	0288  80 C3 00			     ADD BL, 0H					     ; Si es positicvo,	saltamos, si es	    +
    550				     negativo, extendemos el signo
    551	028B  79 02			     JNS M10
    552	028D  B7 FF			     MOV BH, 0FFH
    553
    554	028F			     M10:
    555	028F  F7 EB			     IMUL BX					     ; Multiplicamos A[6h], guardado como   +
    556				     WORD en BX, por el	resultado almacenado en	AX.
    557	0291  8B C8			     MOV CX, AX					     ; El resultado queda almacenado en	AX, +
    558				     con DX = 0	ya que los números son	de 5 bits. Lo movemos a	CX
    559
    560	0293  A0 0001r			     MOV AL, A[1h]			     ; Continuamos por los elementos 1h, 3h y 8h
    561	0296  F6 2E 0003r		 IMUL A[3h]				     ; Multiplicamos A[1h] por A[3h], y	se almacena +
    562				     el	resultado en AX
    563
    564	029A  8A 1E 0008r		     MOV BL, A[8H]
    565	029E  B7 00			     MOV BH, 0H
    566	02A0  80 C3 00			     ADD BL, 0H					     ; Si es positicvo,	saltamos, si es	    +
    567				     negativo, extendemos el signo
    568	02A3  79 02			     JNS M11
    569	02A5  B7 FF			     MOV BH, 0FFH
    570	02A7			     M11:
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 11
det.asm



    571
    572	02A7  F7 EB			     IMUL BX					     ; Multiplicamos A[8h], guardado como   +
    573				     WORD en BX, por el	resultado almacenado en	AX.
    574	02A9  03 C8			     ADD CX, AX					     ; Sumamos el resultado a CX, donde	    +
    575				     guardamos el resultado anterior
    576
    577	02AB  A0 0000r			     MOV AL, A[0h]			     ; Finalizamos con los elementos 0h, 5h y 7h
    578	02AE  F6 2E 0005r		 IMUL A[5h]				     ; Multiplicamos A[0h] por A[5h], y	se almacena +
    579				     el	resultado en AX
    580
    581	02B2  8A 1E 0007r		     MOV BL, A[7H]
    582	02B6  B7 00			     MOV BH, 0H
    583	02B8  80 C3 00			     ADD BL, 0H					     ; Si es positicvo,	saltamos, si es	    +
    584				     negativo, extendemos el signo
    585	02BB  79 02			     JNS M12
    586	02BD  B7 FF			     MOV BH, 0FFH
    587
    588	02BF			     M12:
    589	02BF  F7 EB			     IMUL BX					     ; Multiplicamos A[7h], guardado como   +
    590				     WORD en BX, por el	resultado almacenado en	AX.
    591	02C1  03 C8			     ADD CX, AX					     ; Finalmente sumamos de nuevo a CX	el  +
    592				     resultado final
    593	02C3  C3			     RET
    594
    595
    596	02C4			     NEGAT ENDP
    597
    598
    599				     ; FIN DEL SEGMENTO	DE CODIGO
    600	02C4			     CODE ENDS
    601				     ; FIN DEL PROGRAMA	INDICANDO DONDE	COMIENZA LA EJECUCION
    602				     END START
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 12
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/21/19"
??FILENAME			  Text	 "det	  "
??TIME				  Text	 "20:20:03"
??VERSION			  Number 0200
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 DET
@WORDSIZE			  Text	 2
A				  Byte	 DATOS:0000
ARRIBA				  Near	 CODE:0014
ASCII				  Near	 CODE:0207
BARRAENE			  Byte	 DATOS:01AF
BUCLE				  Near	 CODE:0044
BUCLE2				  Near	 CODE:011B
CERO				  Near	 CODE:00C7
CINCO				  Near	 CODE:00E0
CONTADOR			  Word	 DATOS:00F5
CONTINUA			  Near	 CODE:01EC
CUATRO				  Near	 CODE:00DB
DIGITO				  Near	 CODE:0231
DOS				  Near	 CODE:00D1
DOSD				  Near	 CODE:0183
DOSNUM				  Near	 CODE:019D
ERRORM				  Byte	 DATOS:01A5
ERRORS				  Near	 CODE:0169
ESPACIOS			  Byte	 DATOS:00B2
FACT_DATO_1			  Word	 CODE:0000
FIN				  Near	 CODE:00F4
FINAL				  Near	 CODE:01FC
M00				  Near	 CODE:0246
M01				  Near	 CODE:025E
M02				  Near	 CODE:0276
M10				  Near	 CODE:028F
M11				  Near	 CODE:02A7
M12				  Near	 CODE:02BF
MAS				  Near	 CODE:005D
MAS2				  Near	 CODE:0107
NEGAT				  Near	 CODE:027B
NUM				  Near	 CODE:01FD
NUMERO				  Byte	 DATOS:009C
NUM_DIGITOS			  Word	 DATOS:00B0
OCHO				  Near	 CODE:00EF
OP1				  Near	 CODE:0038
OP2				  Near	 CODE:013A
OP2BUCLE			  Near	 CODE:0148
OPCION				  Byte	 DATOS:0099
OPCION2				  Byte	 DATOS:00F7
POS				  Near	 CODE:0232
RESULT				  Word	 EXTRA:0000
SEIS				  Near	 CODE:00E5
SIETE				  Near	 CODE:00EA
SIGUE				  Near	 CODE:00A1
START				  Near	 CODE:0002
TEXTO				  Byte	 DATOS:0009
Turbo Assembler	 Version 2.0	    03/21/19 20:20:03	    Page 13
Symbol Table



TRES				  Near	 CODE:00D6
TRESD				  Near	 CODE:01C0
UNO				  Near	 CODE:00CC
UNOD				  Near	 CODE:0172

Groups & Segments		  Bit Size Align  Combine Class

CODE				  16  02C4 Para	  none
DATOS				  16  01B2 Para	  none
EXTRA				  16  0004 Para	  none
PILA				  16  0040 Para	  Stack	  STACK
